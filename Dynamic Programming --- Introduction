Dynamic Programming is an algorithmic paradigm that solves a given complex problem by breaking it into subproblems and stores the results of subproblems to avoid computing the same results again. Following are the two main properties of a problem that suggests that the given problem can be solved using Dynamic programming.

In this post, we will discuss first property (Overlapping Subproblems) in detail. The second property of Dynamic programming is discussed in next post i.e. Set 2.

1) Overlapping Subproblems
2) Optimal Substructure

1) Overlapping Subproblems:
Like Divide and Conquer, Dynamic Programming combines solutions to sub-problems. Dynamic Programming is mainly used when solutions of same subproblems are needed again and again. In dynamic programming, computed solutions to subproblems are stored in a table so that these don’t have to be recomputed. So Dynamic Programming is not useful when there are no common (overlapping) subproblems because there is no point storing the solutions if they are not needed again. For example, Binary Search doesn’t have common subproblems. If we take an example of following recursive program for Fibonacci Numbers, there are many subproblems which are solved again and again.
 There are following two different ways to store the values so that these values can be reused:
a) Memoization (Top Down)
b) Tabulation (Bottom Up)

a) Memoization (Top Down): The memoized program for a problem is similar to the recursive version with a small modification that it looks into a lookup table before computing solutions. We initialize a lookup array with all initial values as NIL. Whenever we need the solution to a subproblem, we first look into the lookup table. If the precomputed value is there then we return that value, otherwise, we calculate the value and put the result in the lookup table so that it can be reused later.
b) Tabulation (Bottom Up): The tabulated program for a given problem builds a table in bottom up fashion and returns the last entry from table. For example, for the same Fibonacci number, we first calculate fib(0) then fib(1) then fib(2) then fib(3) and so on. So literally, we are building the solutions of subproblems bottom-up.

source:geeksforgeeks.com

/////////////////////////////////////////////////  Program to compare diff fib algorithm ////////////////////////////////////////////////

#include<stdio.h>
#include<time.h>
//simple fibbonanci iusing recursion
long long int lookup[1000];
long long int fibarray[1000];
long long int fib(int num)
{


    if(num<=1)
        return num;

    return fib(num-1)+fib(num-2);

}
void _initializeLookUp()
{
    int i;
    for (i = 0; i < 1000; i++)
        lookup[i] = NULL;
}
//fib using DP ->memoziation
long long int fibMemoization(int num)
{

    if(lookup[num]==NULL)
    {

        if(num<=1)
        {
             lookup[num]=num;
        }else{
            lookup[num]=fibMemoization(num-1)+fibMemoization(num-2);
        }


    }

    return lookup[num];
}

//fib usoing DP->tabulation (bottom up)
long long int fibtabulation(int num)
{

    long long int i;
    fibarray[0]=0;
    fibarray[1]=1;
    for(i=2;i<=num;i++)
    {
       fibarray[i]=fibarray[i-1]+fibarray[i-2];
    }
    return fibarray[num];
}
int main()
{
    clock_t start,end;
    double cpu_time_used;
    long long int answer=0;
    //Fib using simple recursion
    start=clock();
    answer=fib(40);
    end=clock();
    cpu_time_used = ((double) (end - start)) / CLOCKS_PER_SEC;
    printf("answer is %lld and time used by recursion program : %0.10f\n",answer,cpu_time_used);

    start=clock();
    answer=fibMemoization(40);
    end=clock();
    cpu_time_used = ((double) (end - start)) / CLOCKS_PER_SEC;
    printf("answer is %lld and time used by Memoization DP program : %0.10f\n",answer,cpu_time_used);

    start=clock();
    answer=fibtabulation(40);
    end=clock();
    cpu_time_used = ((double) (end - start)) / CLOCKS_PER_SEC;
    printf("answer is %lld and time used by Tabulation DP program : %0.10f\n",answer,cpu_time_used);


}
