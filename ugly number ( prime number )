
////////////////////////////////////////////////// Problem //////////////////////////////////////////////////////////////////////////
Ugly numbers are numbers whose only prime factors are 2, 3 or 5. The sequence 1, 2, 3, 4, 5, 6, 8, 9, 10, 12, 15, … shows the first 11 ugly numbers. By convention, 1 is included. Write a program to find Nth Ugly Number.

Input:
The first line of input contains an integer T denoting the number of test cases. T testcases follow. For each testcase there is one line of input that contains the number N.

Output:
Print the Nth Ugly Number.

Constraints:
1 ≤ T ≤ 104
1 ≤ N ≤ 104

Example:
Input:
2
10
4
Output:
12
4

////////////////////////////////////////////////// Solution ///////////////////////////////////////////////////////////////////////

Here is a time efficient solution with O(n) extra space. The ugly-number sequence is 1, 2, 3, 4, 5, 6, 8, 9, 10, 12, 15, …
     because every number can only be divided by 2, 3, 5, one way to look at the sequence is to split the sequence to three groups as below:
     (1) 1×2, 2×2, 3×2, 4×2, 5×2, …
     (2) 1×3, 2×3, 3×3, 4×3, 5×3, …
     (3) 1×5, 2×5, 3×5, 4×5, 5×5, …

     We can find that every subsequence is the ugly-sequence itself (1, 2, 3, 4, 5, …) multiply 2, 3, 5. Then we use similar merge method as merge sort, to get every ugly number from the three subsequence. Every step we choose the smallest one, and move one step after.


1 Declare an array for ugly numbers:  ugly[n]
2 Initialize first ugly no:  ugly[0] = 1
3 Initialize three array index variables i2, i3, i5 to point to 
   1st element of the ugly array: 
        i2 = i3 = i5 =0; 
4 Initialize 3 choices for the next ugly no:
         next_mulitple_of_2 = ugly[i2]*2;
         next_mulitple_of_3 = ugly[i3]*3
         next_mulitple_of_5 = ugly[i5]*5;
5 Now go in a loop to fill all ugly numbers till 150:
For (i = 1; i < 150; i++ ) 
{
    /* These small steps are not optimized for good 
      readability. Will optimize them in C program */
    next_ugly_no  = Min(next_mulitple_of_2,
                        next_mulitple_of_3,
                        next_mulitple_of_5); 

    ugly[i] =  next_ugly_no       

    if (next_ugly_no  == next_mulitple_of_2) 
    {             
        i2 = i2 + 1;        
        next_mulitple_of_2 = ugly[i2]*2;
    } 
    if (next_ugly_no  == next_mulitple_of_3) 
    {             
        i3 = i3 + 1;        
        next_mulitple_of_3 = ugly[i3]*3;
     }            
     if (next_ugly_no  == next_mulitple_of_5)
     {    
        i5 = i5 + 1;        
        next_mulitple_of_5 = ugly[i5]*5;
     } 
     
}/* end of for loop */ 
6.return next_ugly_no


//////////////////////////////////////////////////  Program /////////////////////////////////////////////////

#include<stdio.h>
long long int ugly[100002];
long long int min(long long int a,long long int b,long long int c)
{
    if(b<a)
    {
        if(b<c)
        {
            return b;
        }
        return c;
    }else{
        if(a<c)
        {
            return a;
        }
        return c;

    }
}
int main()
{
	long long int i,j,minval,k,t,n,uglyindex=0,i2,i3,i5;
	long long int multiple_of_2,multiple_of_5,multiple_of_3;

	scanf("%lld",&t);
	for(i=0;i<t;i++)
	{
	    multiple_of_2=2,multiple_of_5=5,multiple_of_3=3;
	    scanf("%lld",&n);
	    i2=0;i3=0;i5=0;
	    ugly[0]=1;
	    uglyindex=1;
	    while(1)
	    {
	        if(uglyindex>=n)
            {
                break;
            }
	     minval=min(multiple_of_2,multiple_of_5,multiple_of_3);

	     ugly[uglyindex]=minval;
	     uglyindex++;
	     if(minval==multiple_of_2)
	     {
	         i2++;
	         multiple_of_2=ugly[i2]*2;
	     }
	     if(minval==multiple_of_3)
	     {
	          i3++;
	         multiple_of_3=ugly[i3]*3;
	     }
	     if(minval==multiple_of_5)
	     {
	         i5++;
	         multiple_of_5=ugly[i5]*5;
	     }
	    }
	    for(j=0;j<uglyindex;j++)
        {

            printf("%lld ",ugly[j]);
        }
        printf("\n");
	}
	return 0;
}
author pratik wanjari
source geeksforgeeks.com
